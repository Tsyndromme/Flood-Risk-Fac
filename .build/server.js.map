{
  "version": 3,
  "sources": ["../server.js"],
  "sourcesContent": ["import { createRequestHandler } from \"@remix-run/netlify\";\nimport * as build from \"@remix-run/dev/server-build\";\n\n/*\n * Returns a context object with at most 3 keys:\n *  - `netlifyGraphToken`: raw authentication token to use with Netlify Graph\n *  - `clientNetlifyGraphAccessToken`: For use with JWTs generated by\n *    `netlify-graph-auth`.\n *  - `netlifyGraphSignature`: a signature for subscription events. Will be\n *    present if a secret is set.\n */\nfunction getLoadContext(event, context) {\n  let rawAuthorizationString;\n  let netlifyGraphToken;\n\n  if (event.authlifyToken != null) {\n    netlifyGraphToken = event.authlifyToken;\n  }\n\n  const authHeader = event.headers[\"authorization\"];\n  const graphSignatureHeader = event.headers[\"x-netlify-graph-signature\"];\n\n  if (authHeader != null && /Bearer /gi.test(authHeader)) {\n    rawAuthorizationString = authHeader.split(\" \")[1];\n  }\n\n  const loadContext = {\n    clientNetlifyGraphAccessToken: rawAuthorizationString,\n    netlifyGraphToken: netlifyGraphToken,\n    netlifyGraphSignature: graphSignatureHeader,\n  };\n\n  // Remove keys with undefined values\n  Object.keys(loadContext).forEach((key) => {\n    if (loadContext[key] == null) {\n      delete loadContext[key];\n    }\n  });\n\n  return loadContext;\n}\n\nexport const handler = createRequestHandler({\n  build,\n  getLoadContext,\n  mode: process.env.NODE_ENV,\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAqC;AACrC,YAAuB;AAUvB,SAAS,eAAe,OAAO,SAAS;AACtC,MAAI;AACJ,MAAI;AAEJ,MAAI,MAAM,iBAAiB,MAAM;AAC/B,wBAAoB,MAAM;AAAA,EAC5B;AAEA,QAAM,aAAa,MAAM,QAAQ;AACjC,QAAM,uBAAuB,MAAM,QAAQ;AAE3C,MAAI,cAAc,QAAQ,YAAY,KAAK,UAAU,GAAG;AACtD,6BAAyB,WAAW,MAAM,GAAG,EAAE;AAAA,EACjD;AAEA,QAAM,cAAc;AAAA,IAClB,+BAA+B;AAAA,IAC/B;AAAA,IACA,uBAAuB;AAAA,EACzB;AAGA,SAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,QAAQ;AACxC,QAAI,YAAY,QAAQ,MAAM;AAC5B,aAAO,YAAY;AAAA,IACrB;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEO,MAAM,cAAU,qCAAqB;AAAA,EAC1C;AAAA,EACA;AAAA,EACA,MAAM,QAAQ,IAAI;AACpB,CAAC;",
  "names": []
}
