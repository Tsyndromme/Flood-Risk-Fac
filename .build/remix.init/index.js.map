{
  "version": 3,
  "sources": ["../../remix.init/index.js"],
  "sourcesContent": ["const crypto = require(\"crypto\");\nconst fs = require(\"fs/promises\");\nconst path = require(\"path\");\n\nconst sort = require(\"sort-package-json\");\n\nfunction escapeRegExp(string) {\n  // $& means the whole matched string\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\nfunction getRandomString(length) {\n  return crypto.randomBytes(length).toString(\"hex\");\n}\n\n// The initialization script for your project after\n// you've installed.\n//\n// This will:\n// - Replace our template name for your given app name in the README\n// - Replace our template name for your given app name in the package.json\n// - Add a new .env file for you to use based upon the example file\nasync function main({ rootDirectory }) {\n  const EXAMPLE_ENV_PATH = path.join(rootDirectory, \".env.sample\");\n  const ENV_PATH = path.join(rootDirectory, \".env\");\n  const README_PATH = path.join(rootDirectory, \"README.md\");\n  const PACKAGE_JSON_PATH = path.join(rootDirectory, \"package.json\");\n\n  const REPLACER = \"kpop-stack-template\";\n\n  const DIR_NAME = path.basename(rootDirectory);\n  const SUFFIX = getRandomString(2);\n  const APP_NAME = (DIR_NAME + \"-\" + SUFFIX)\n    // get rid of anything that's not allowed in an app name\n    .replace(/[^a-zA-Z0-9-_]/g, \"-\");\n\n  const [env, readme, packageJson] = await Promise.all([\n    fs.readFile(EXAMPLE_ENV_PATH, \"utf-8\"),\n    fs.readFile(README_PATH, \"utf-8\"),\n    fs.readFile(PACKAGE_JSON_PATH, \"utf-8\"),\n  ]);\n\n  // Create a new env file with all the necessary keys.\n  // This will create a new key to give you a new session key\n  // You will want to be sure to add your own credentials\n  // as well.\n  const newEnv = env.replace(\n    /^SESSION_SECRET=.*$/m,\n    `SESSION_SECRET=\"${getRandomString(16)}\"`\n  );\n\n  // Parse the README and replace the name with our app name\n  const newReadme = readme.replace(\n    new RegExp(escapeRegExp(REPLACER), \"g\"),\n    APP_NAME\n  );\n\n  // Parse the package file and rename the application name\n  const newPackageJson =\n    JSON.stringify(\n      sort({ ...JSON.parse(packageJson), name: APP_NAME }),\n      null,\n      2\n    ) + \"\\n\";\n\n  await Promise.all([\n    fs.writeFile(ENV_PATH, newEnv),\n    fs.writeFile(README_PATH, newReadme),\n    fs.writeFile(PACKAGE_JSON_PATH, newPackageJson),\n  ]);\n\n  console.log(\n    `\nSetup is almost complete! Follow these steps to finish initialization:\n- Create a new Supabase project and perform the SQL queries described in the README.\n- Add your Supabase credentials (SUPABASE_URL and SUPABASE_ANON_KEY) in your .env file.\n- Run the first build (this generates the server you will run):\n  npm run build\n- You're now ready to rock and roll \uD83E\uDD18\n  npm run dev\n    `.trim()\n  );\n}\n\nmodule.exports = main;\n"],
  "mappings": ";AAAA,MAAM,SAAS,QAAQ,QAAQ;AAC/B,MAAM,KAAK,QAAQ,aAAa;AAChC,MAAM,OAAO,QAAQ,MAAM;AAE3B,MAAM,OAAO,QAAQ,mBAAmB;AAExC,SAAS,aAAa,QAAQ;AAE5B,SAAO,OAAO,QAAQ,uBAAuB,MAAM;AACrD;AAEA,SAAS,gBAAgB,QAAQ;AAC/B,SAAO,OAAO,YAAY,MAAM,EAAE,SAAS,KAAK;AAClD;AASA,eAAe,KAAK,EAAE,cAAc,GAAG;AACrC,QAAM,mBAAmB,KAAK,KAAK,eAAe,aAAa;AAC/D,QAAM,WAAW,KAAK,KAAK,eAAe,MAAM;AAChD,QAAM,cAAc,KAAK,KAAK,eAAe,WAAW;AACxD,QAAM,oBAAoB,KAAK,KAAK,eAAe,cAAc;AAEjE,QAAM,WAAW;AAEjB,QAAM,WAAW,KAAK,SAAS,aAAa;AAC5C,QAAM,SAAS,gBAAgB,CAAC;AAChC,QAAM,YAAY,WAAW,MAAM,QAEhC,QAAQ,mBAAmB,GAAG;AAEjC,QAAM,CAAC,KAAK,QAAQ,WAAW,IAAI,MAAM,QAAQ,IAAI;AAAA,IACnD,GAAG,SAAS,kBAAkB,OAAO;AAAA,IACrC,GAAG,SAAS,aAAa,OAAO;AAAA,IAChC,GAAG,SAAS,mBAAmB,OAAO;AAAA,EACxC,CAAC;AAMD,QAAM,SAAS,IAAI;AAAA,IACjB;AAAA,IACA,mBAAmB,gBAAgB,EAAE;AAAA,EACvC;AAGA,QAAM,YAAY,OAAO;AAAA,IACvB,IAAI,OAAO,aAAa,QAAQ,GAAG,GAAG;AAAA,IACtC;AAAA,EACF;AAGA,QAAM,iBACJ,KAAK;AAAA,IACH,KAAK,EAAE,GAAG,KAAK,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC;AAAA,IACnD;AAAA,IACA;AAAA,EACF,IAAI;AAEN,QAAM,QAAQ,IAAI;AAAA,IAChB,GAAG,UAAU,UAAU,MAAM;AAAA,IAC7B,GAAG,UAAU,aAAa,SAAS;AAAA,IACnC,GAAG,UAAU,mBAAmB,cAAc;AAAA,EAChD,CAAC;AAED,UAAQ;AAAA,IACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQE,KAAK;AAAA,EACT;AACF;AAEA,OAAO,UAAU;",
  "names": []
}
