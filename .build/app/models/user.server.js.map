{
  "version": 3,
  "sources": ["../../../app/models/user.server.ts"],
  "sourcesContent": ["import bcrypt from \"bcryptjs\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport invariant from \"tiny-invariant\";\n\nexport type User = { id: string; email: string };\n\n// Abstract this away\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\n\ninvariant(\n  supabaseUrl,\n  \"SUPABASE_URL must be set in your environment variables.\"\n);\ninvariant(\n  supabaseAnonKey,\n  \"SUPABASE_ANON_KEY must be set in your environment variables.\"\n);\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport async function createUser(email: string, password: string) {\n  const { user } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  // get the user profile after created\n  const profile = await getProfileByEmail(user?.email);\n\n  return profile;\n}\n\nexport async function getProfileById(id: string) {\n  const { data, error } = await supabase\n    .from(\"profiles\")\n    .select(\"email, id\")\n    .eq(\"id\", id)\n    .single();\n\n  if (error) return null;\n  if (data) return { id: data.id, email: data.email };\n}\n\nexport async function getProfileByEmail(email?: string) {\n  const { data, error } = await supabase\n    .from(\"profiles\")\n    .select(\"email, id\")\n    .eq(\"email\", email)\n    .single();\n\n  if (error) return null;\n  if (data) return data;\n}\n\nexport async function verifyLogin(email: string, password: string) {\n  const { user, error } = await supabase.auth.signIn({\n    email,\n    password,\n  });\n\n  if (error) return undefined;\n  const profile = await getProfileByEmail(user?.email);\n\n  return profile;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAA6B;AAC7B,4BAAsB;AAKtB,MAAM,cAAc,QAAQ,IAAI;AAChC,MAAM,kBAAkB,QAAQ,IAAI;AAAA,IAEpC,sBAAAA;AAAA,EACE;AAAA,EACA;AACF;AAAA,IACA,sBAAAA;AAAA,EACE;AAAA,EACA;AACF;AAEO,MAAM,eAAW,iCAAa,aAAa,eAAe;AAEjE,eAAsB,WAAW,OAAe,UAAkB;AAChE,QAAM,EAAE,KAAK,IAAI,MAAM,SAAS,KAAK,OAAO;AAAA,IAC1C;AAAA,IACA;AAAA,EACF,CAAC;AAGD,QAAM,UAAU,MAAM,kBAAkB,6BAAM,KAAK;AAEnD,SAAO;AACT;AAEA,eAAsB,eAAe,IAAY;AAC/C,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,SAC3B,KAAK,UAAU,EACf,OAAO,WAAW,EAClB,GAAG,MAAM,EAAE,EACX,OAAO;AAEV,MAAI;AAAO,WAAO;AAClB,MAAI;AAAM,WAAO,EAAE,IAAI,KAAK,IAAI,OAAO,KAAK,MAAM;AACpD;AAEA,eAAsB,kBAAkB,OAAgB;AACtD,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,SAC3B,KAAK,UAAU,EACf,OAAO,WAAW,EAClB,GAAG,SAAS,KAAK,EACjB,OAAO;AAEV,MAAI;AAAO,WAAO;AAClB,MAAI;AAAM,WAAO;AACnB;AAEA,eAAsB,YAAY,OAAe,UAAkB;AACjE,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,SAAS,KAAK,OAAO;AAAA,IACjD;AAAA,IACA;AAAA,EACF,CAAC;AAED,MAAI;AAAO,WAAO;AAClB,QAAM,UAAU,MAAM,kBAAkB,6BAAM,KAAK;AAEnD,SAAO;AACT;",
  "names": ["invariant"]
}
