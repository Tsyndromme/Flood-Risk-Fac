{
  "version": 3,
  "sources": ["../../app/session.server.ts"],
  "sourcesContent": ["import { createCookieSessionStorage, redirect } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { getProfileById } from \"./models/user.server\";\n\ninvariant(\n  process.env.SESSION_SECRET,\n  \"SESSION_SECRET must be set in your environment variables.\"\n);\n\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    httpOnly: true,\n    maxAge: 60,\n    path: \"/\",\n    sameSite: \"lax\",\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === \"production\",\n  },\n});\n\nconst USER_SESSION_KEY = \"userId\";\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function getUserId(request: Request) {\n  const session = await getSession(request);\n  const userId = session.get(USER_SESSION_KEY);\n\n  return userId;\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (userId === undefined) return null;\n\n  const user = await getProfileById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\n/**\n * Require a user session to get to a page. If none is found\n * redirect them to the login page. After login, take them to\n * the original page they wanted to get to.\n */\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n\n  return userId;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n  if (userId == undefined) return null;\n\n  const profile = await getProfileById(userId);\n  if (profile) return profile;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  const session = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(session, {\n        maxAge: remember\n          ? 60 * 60 * 24 * 7 // 7 days\n          : undefined,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqD;AACrD,4BAAsB;AACtB,kBAA+B;AAAA,IAE/B,sBAAAA;AAAA,EACE,QAAQ,IAAI;AAAA,EACZ;AACF;AAEO,MAAM,qBAAiB,wCAA2B;AAAA,EACvD,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS,CAAC,QAAQ,IAAI,cAAc;AAAA,IACpC,QAAQ,QAAQ,IAAI,aAAa;AAAA,EACnC;AACF,CAAC;AAED,MAAM,mBAAmB;AAEzB,eAAsB,WAAW,SAAkB;AACjD,QAAM,SAAS,QAAQ,QAAQ,IAAI,QAAQ;AAC3C,SAAO,eAAe,WAAW,MAAM;AACzC;AAEA,eAAsB,UAAU,SAAkB;AAChD,QAAM,UAAU,MAAM,WAAW,OAAO;AACxC,QAAM,SAAS,QAAQ,IAAI,gBAAgB;AAE3C,SAAO;AACT;AAEA,eAAsB,QAAQ,SAAkB;AAC9C,QAAM,SAAS,MAAM,UAAU,OAAO;AACtC,MAAI,WAAW;AAAW,WAAO;AAEjC,QAAM,OAAO,UAAM,4BAAe,MAAM;AACxC,MAAI;AAAM,WAAO;AAEjB,QAAM,MAAM,OAAO,OAAO;AAC5B;AAOA,eAAsB,cACpB,SACA,aAAqB,IAAI,IAAI,QAAQ,GAAG,EAAE,UAC1C;AACA,QAAM,SAAS,MAAM,UAAU,OAAO;AACtC,MAAI,CAAC,QAAQ;AACX,UAAM,eAAe,IAAI,gBAAgB,CAAC,CAAC,cAAc,UAAU,CAAC,CAAC;AACrE,cAAM,sBAAS,UAAU,cAAc;AAAA,EACzC;AAEA,SAAO;AACT;AAEA,eAAsB,YAAY,SAAkB;AAClD,QAAM,SAAS,MAAM,cAAc,OAAO;AAC1C,MAAI,UAAU;AAAW,WAAO;AAEhC,QAAM,UAAU,UAAM,4BAAe,MAAM;AAC3C,MAAI;AAAS,WAAO;AAEpB,QAAM,MAAM,OAAO,OAAO;AAC5B;AAEA,eAAsB,kBAAkB;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKG;AACD,QAAM,UAAU,MAAM,WAAW,OAAO;AACxC,UAAQ,IAAI,kBAAkB,MAAM;AACpC,aAAO,sBAAS,YAAY;AAAA,IAC1B,SAAS;AAAA,MACP,cAAc,MAAM,eAAe,cAAc,SAAS;AAAA,QACxD,QAAQ,WACJ,KAAK,KAAK,KAAK,IACf;AAAA,MACN,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;AAEA,eAAsB,OAAO,SAAkB;AAC7C,QAAM,UAAU,MAAM,WAAW,OAAO;AACxC,aAAO,sBAAS,KAAK;AAAA,IACnB,SAAS;AAAA,MACP,cAAc,MAAM,eAAe,eAAe,OAAO;AAAA,IAC3D;AAAA,EACF,CAAC;AACH;",
  "names": ["invariant"]
}
